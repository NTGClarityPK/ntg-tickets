// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  END_USER
  SUPPORT_STAFF
  SUPPORT_MANAGER
  ADMIN
}

// Note: TicketStatus enum kept for backward compatibility
// The tickets.status field now uses String to support custom workflow statuses
enum TicketStatus {
  NEW
  OPEN
  IN_PROGRESS
  ON_HOLD
  RESOLVED
  CLOSED
  REOPENED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TicketCategory {
  HARDWARE
  SOFTWARE
  NETWORK
  ACCESS
  OTHER
  CUSTOM
}

enum TicketImpact {
  MINOR
  MODERATE
  MAJOR
  CRITICAL
}

enum TicketUrgency {
  LOW
  NORMAL
  HIGH
  IMMEDIATE
}

enum SLALevel {
  STANDARD
  PREMIUM
  CRITICAL_SUPPORT
}

enum NotificationType {
  TICKET_CREATED
  TICKET_ASSIGNED
  TICKET_STATUS_CHANGED
  COMMENT_ADDED
  SLA_WARNING
  SLA_BREACH
  TICKET_DUE
  TICKET_ESCALATED
}

enum CustomFieldType {
  TEXT
  NUMBER
  DATE
  SELECT
  BOOLEAN
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  ASSIGN
  ESCALATE
  COMMENT
  ATTACH
  STATUS_CHANGE
  PRIORITY_CHANGE
  CATEGORY_CHANGE
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  roles     UserRole[] @default([END_USER])
  isActive  Boolean  @default(true)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  requestedTickets    Ticket[]        @relation("TicketRequester")
  assignedTickets     Ticket[]        @relation("TicketAssignee")
  comments            Comment[]
  attachments         Attachment[]
  ticketHistory       TicketHistory[]
  notifications       Notification[]
  createdCategories   Category[]      @relation("CategoryCreator")
  createdSubcategories Subcategory[]  @relation("SubcategoryCreator")
  savedSearches       SavedSearch[]
  auditLogs           AuditLog[]
  createdWorkflows    Workflow[]
  workflowExecutions  WorkflowExecution[]

  @@map("users")
}

model Category {
  id          String        @id @default(uuid())
  name        TicketCategory
  customName  String?       @unique
  description String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String
  creator     User          @relation("CategoryCreator", fields: [createdBy], references: [id])

  // Relations
  subcategories Subcategory[]
  tickets       Ticket[]

  @@map("categories")
}

model Subcategory {
  id          String   @id @default(uuid())
  categoryId  String
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  creator     User     @relation("SubcategoryCreator", fields: [createdBy], references: [id])

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tickets  Ticket[]

  @@unique([name, categoryId])
  @@map("subcategories")
}

model Ticket {
  id            String         @id @default(uuid())
  ticketNumber  String         @unique
  title         String
  description   String
  categoryId    String
  subcategoryId String?
  priority      TicketPriority @default(MEDIUM)
  status        String         @default("NEW") // Changed from TicketStatus enum to String to support custom workflow statuses
  impact        TicketImpact   @default(MODERATE)
  urgency       TicketUrgency  @default(NORMAL)
  slaLevel      SLALevel       @default(STANDARD)
  requesterId   String
  assignedToId  String?
  dueDate       DateTime?
  resolution    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  closedAt      DateTime?

  // Relations
  requester     User            @relation("TicketRequester", fields: [requesterId], references: [id])
  assignedTo    User?           @relation("TicketAssignee", fields: [assignedToId], references: [id])
  category      Category        @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory?    @relation(fields: [subcategoryId], references: [id])
  comments      Comment[]
  attachments   Attachment[]
  history       TicketHistory[]
  notifications Notification[]
  relatedTickets TicketRelation[] @relation("TicketRelations")
  relatedToTickets TicketRelation[] @relation("RelatedTicketRelations")
  customFields TicketCustomField[]
  workflowId    String?
  workflow      Workflow?       @relation(fields: [workflowId], references: [id])
  workflowSnapshot Json?         // Snapshot of the workflow at ticket creation time
  workflowVersion  Int?          // Version of the workflow when ticket was created
  workflowExecutions WorkflowExecution[]

  @@map("tickets")
}

model Comment {
  id        String   @id @default(uuid())
  ticketId  String
  userId    String
  content   String
  isInternal Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Attachment {
  id        String   @id @default(uuid())
  ticketId  String
  filename  String
  fileSize  Int
  fileType  String
  fileUrl   String
  uploadedBy String
  createdAt DateTime @default(now())

  // Relations
  ticket     Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  uploader   User   @relation(fields: [uploadedBy], references: [id])

  @@map("attachments")
}

model TicketHistory {
  id        String   @id @default(uuid())
  ticketId  String
  userId    String
  fieldName String
  oldValue  String?
  newValue  String?
  createdAt DateTime @default(now())

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@map("ticket_history")
}

model TicketRelation {
  id           String @id @default(uuid())
  ticketId     String
  relatedTicketId String
  relationType String // 'duplicate', 'blocked_by', 'blocks', 'related'

  // Relations
  ticket        Ticket @relation("TicketRelations", fields: [ticketId], references: [id], onDelete: Cascade)
  relatedTicket Ticket @relation("RelatedTicketRelations", fields: [relatedTicketId], references: [id], onDelete: Cascade)

  @@unique([ticketId, relatedTicketId])
  @@map("ticket_relations")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  ticketId  String?
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user   User    @relation(fields: [userId], references: [id])
  ticket Ticket? @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model CustomField {
  id          String   @id @default(uuid())
  name        String   @unique
  fieldType   CustomFieldType
  options     Json?    // For SELECT fields
  isRequired  Boolean  @default(false)
  isActive    Boolean  @default(true)
  description String?
  category    String?  // Category filter for ticket forms
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ticketCustomFields TicketCustomField[]

  @@map("custom_fields")
}

model TicketCustomField {
  id            String @id @default(uuid())
  ticketId      String
  customFieldId String
  value         String

  // Relations
  ticket      Ticket      @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  customField CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)

  @@unique([ticketId, customFieldId])
  @@map("ticket_custom_fields")
}

model EmailTemplate {
  id        String   @id @default(uuid())
  name      String
  type      String   @unique
  subject   String
  html      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_templates")
}

model SavedSearch {
  id             String   @id @default(uuid())
  name           String
  description    String?
  searchCriteria String   // JSON string containing search filters
  userId         String
  isPublic       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("saved_searches")
}

model AuditLog {
  id          String      @id @default(uuid())
  userId      String
  action      AuditAction
  resource    String      // 'ticket', 'user', 'category', etc.
  resourceId  String?     // ID of the affected resource
  fieldName   String?     // Specific field that was changed
  oldValue    String?     // Previous value
  newValue    String?     // New value
  ipAddress   String?     // User's IP address
  userAgent   String?     // User's browser/client info
  metadata    Json?       // Additional context data
  createdAt   DateTime    @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model SystemSettings {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model ThemeSettings {
  id          String   @id @default(uuid())
  primaryColor String?  // Custom primary color
  logoUrl     String?  // Custom logo URL
  faviconUrl  String?  // Custom favicon URL
  logoData    String?  // Base64 encoded logo data
  faviconData String?  // Base64 encoded favicon data
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("theme_settings")
}

model Integration {
  id           String   @id @default(uuid())
  name         String
  type         String
  enabled      Boolean  @default(false)
  config       Json     @default("{}")
  credentials  Json     @default("{}")
  webhookUrl   String?
  apiKey       String?
  clientId     String?
  clientSecret String?
  tenantId     String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("integrations")
}

// Workflow Enums
enum WorkflowStatus {
  DRAFT
  ACTIVE
  INACTIVE
}

enum WorkflowConditionType {
  REQUIRES_COMMENT
  REQUIRES_RESOLUTION
  REQUIRES_ASSIGNEE
  CUSTOM_FIELD_VALUE
}

enum WorkflowActionType {
  SEND_NOTIFICATION
  ASSIGN_USER
  UPDATE_FIELD
  SEND_EMAIL
  CREATE_TASK
}

// Workflow Models
model Workflow {
  id          String         @id @default(uuid())
  name        String
  description String?
  status      WorkflowStatus @default(DRAFT)
  isDefault   Boolean        @default(false)
  isActive    Boolean        @default(true)
  isSystemDefault Boolean    @default(false) // System default workflow - cannot be edited or deleted
  version     Int            @default(1)
  definition  Json?          // The workflow definition JSON
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?      // Soft delete - for hiding from UI but keeping for old tickets
  createdBy   String

  // Relations
  createdByUser User                @relation(fields: [createdBy], references: [id])
  transitions   WorkflowTransition[]
  executions    WorkflowExecution[]
  tickets       Ticket[]

  @@map("workflows")
}

model WorkflowTransition {
  id          String   @id @default(uuid())
  workflowId  String
  fromState   String
  toState     String
  name        String
  description String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workflow    Workflow             @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  conditions  WorkflowCondition[]
  actions     WorkflowAction[]
  permissions WorkflowPermission[]

  @@map("workflow_transitions")
}

model WorkflowCondition {
  id           String                @id @default(uuid())
  transitionId String
  type         WorkflowConditionType
  value        String?
  isActive     Boolean               @default(true)
  createdAt    DateTime              @default(now())

  // Relations
  transition WorkflowTransition @relation(fields: [transitionId], references: [id], onDelete: Cascade)

  @@map("workflow_conditions")
}

model WorkflowAction {
  id           String            @id @default(uuid())
  transitionId String
  type         WorkflowActionType
  config       Json              @default("{}")
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())

  // Relations
  transition WorkflowTransition @relation(fields: [transitionId], references: [id], onDelete: Cascade)

  @@map("workflow_actions")
}

model WorkflowPermission {
  id           String   @id @default(uuid())
  transitionId String
  role         UserRole
  canExecute   Boolean  @default(true)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())

  // Relations
  transition WorkflowTransition @relation(fields: [transitionId], references: [id], onDelete: Cascade)

  @@map("workflow_permissions")
}

model WorkflowExecution {
  id           String   @id @default(uuid())
  ticketId     String
  workflowId   String
  transitionId String?
  fromState    String?
  toState      String?
  executedBy   String
  comment      String?
  executedAt   DateTime @default(now())
  result       String?  // SUCCESS, FAILED, SKIPPED
  errorMessage String?
  metadata     Json?    // Additional execution data

  // Relations
  ticket   Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [executedBy], references: [id])

  @@map("workflow_executions")
}